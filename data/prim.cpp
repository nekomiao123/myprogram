#include <bits/stdc++.h>

/* 图的邻接矩阵表示法 */

#define MaxVertexNum 100 /* 最大顶点数设为100 */
#define INFINITYT 65535   /* ∞设为双字节无符号整数的最大值65535*/
typedef int Vertex;      /* 用顶点下标表示顶点,为整型 */
typedef int WeightType;  /* 边的权值设为整型 */
typedef char DataType;   /* 顶点存储的数据类型设为字符型 */

/* 边的定义 */
typedef struct ENode *PtrToENode;
struct ENode
{
    Vertex V1, V2;     /* 有向边<V1, V2> */
    WeightType Weight; /* 权重 */
};
typedef PtrToENode Edge;

/* 图结点的定义 */
typedef struct GNode *PtrToGNode;
struct GNode
{
    int Nv;                                   /* 顶点数 */
    int Ne;                                   /* 边数   */
    WeightType G[MaxVertexNum][MaxVertexNum]; /* 邻接矩阵 */
    DataType Data[MaxVertexNum];              /* 存顶点的数据 */
    /* 注意：很多情况下，顶点无数据，此时Data[]可以不用出现 */
};
typedef PtrToGNode MGraph; /* 以邻接矩阵存储的图类型 */


/* 邻接矩阵存储 - Prim最小生成树算法 */

//返回未被收录的顶点中dist最小者
Vertex FindMinDist(MGraph Graph,WeightType dist[])
{ 
    Vertex MinV,V;
    WeightType MinDist = INFINITY;

    for(V=0;V<Graph->Nv;V++)
    {
        if(dist[V]!=0&&dist[V]<MinDist)
        {
            MinDist = dist[V];
            
        }
    }
}
